{"version":3,"sources":["webpack://tasktimer/webpack/universalModuleDefinition","webpack://tasktimer/webpack/bootstrap","webpack://tasktimer/./src/index.ts","webpack://tasktimer/./src/utils.ts","webpack://tasktimer/./src/Task.ts","webpack://tasktimer/./src/TaskTimer.ts","webpack://tasktimer/./node_modules/eventemitter3/index.js"],"names":["root","factory","exports","module","define","amd","this","installedModules","__webpack_require__","m","__export","p","hasOwnProperty","Object","defineProperty","value","proto","prototype","NODE","setImmediate","process","hrtime","utils","BROWSER","type","o","toString","call","match","toLowerCase","isset","ensureArray","Array","isArray","getNumber","minimum","defaultValue","getBool","cb","args","_i","arguments","length","setTimeout","apply","concat","clearImmediate","id","clearTimeout","isPromise","then","__assign","assign","t","s","i","n","_1","utils_1","DEFAULT_TASK_OPTIONS","freeze","enabled","tickDelay","tickInterval","totalRuns","startDate","stopDate","immediate","removeOnCompleted","callback","meta","Task","get","_","enumerable","configurable","set","currentRuns","started","timeOnFirstRun","stopped","timeOnLastRun","elapsed","_markedCompleted","Boolean","Date","now","tickCount","Math","ceil","Number","_timer","interval","timeToRun","onInterval","reset","options","Error","_init","toJSON","obj","_setTimer","timer","_emit","name","object","event","source","error","data","emit","_done","completed","_taskCompleted","_execCallback","_this","catch","err","TaskTimer","Event","TASK_ERROR","_run","onRun","String","extendStatics","__extends","d","b","setPrototypeOf","__proto__","__","constructor","create","_super","State","eventemitter3_1","DEFAULT_TIMER_OPTIONS","precision","stopOnCompleted","EventEmitter","opts","state","_a","startTime","stopTime","current","STOPPED","keys","tasks","taskRunCount","_runCount","getAllTask","add","task","forEach","item","_add","remove","completedTaskCount","TASK_REMOVED","start","_stop","RUNNING","_markTime","STARTED","pause","PAUSED","resume","IDLE","RESUMED","stop","_reset","RESET","_getUniqueTaskID","TASK_ADDED","tickCountAfterResume","_timeoutRef","_immediateRef","resumeTime","hrResumeTime","TASK_COMPLETED","taskCount","COMPLETED","_tick","TICK","canRunOnTick","TASK","_getTimeDiff","hrDiff","diff","floor","num","has","prefix","Events","EE","fn","context","once","addListener","emitter","TypeError","listener","evt","_events","push","_eventsCount","clearEvent","eventNames","events","names","slice","getOwnPropertySymbols","listeners","handlers","l","ee","listenerCount","a1","a2","a3","a4","a5","len","removeListener","undefined","j","on","removeAllListeners","off","prefixed","c","getter","r","Symbol","toStringTag","mode","__esModule","ns","key","bind","property","moduleId","modules"],"mappings":"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","file":"tasktimer.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"tasktimer\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"tasktimer\"] = factory();\n\telse\n\t\troot[\"tasktimer\"] = factory();\n})(this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"lib/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","\"use strict\";\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__export(require(\"./Task\"));\r\n__export(require(\"./TaskTimer\"));\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar proto = Object.prototype;\r\nvar NODE = typeof setImmediate === 'function'\r\n    && typeof process === 'object'\r\n    && typeof process.hrtime === 'function';\r\nvar BROWSER = !NODE;\r\n/** @private */\r\nvar utils = {\r\n    NODE: NODE,\r\n    BROWSER: BROWSER,\r\n    type: function (o) {\r\n        return proto.toString.call(o).match(/\\s(\\w+)/i)[1].toLowerCase();\r\n    },\r\n    isset: function (o) {\r\n        return o !== null && o !== undefined;\r\n    },\r\n    ensureArray: function (o) {\r\n        return utils.isset(o)\r\n            ? !Array.isArray(o) ? [o] : o\r\n            : [];\r\n    },\r\n    getNumber: function (value, minimum, defaultValue) {\r\n        return typeof value === 'number'\r\n            ? (value < minimum ? minimum : value)\r\n            : defaultValue;\r\n    },\r\n    getBool: function (value, defaultValue) {\r\n        return typeof value !== 'boolean'\r\n            ? defaultValue\r\n            : value;\r\n    },\r\n    setImmediate: function (cb) {\r\n        var args = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            args[_i - 1] = arguments[_i];\r\n        }\r\n        /* istanbul ignore if */\r\n        if (utils.BROWSER) { // tested separately\r\n            return setTimeout(cb.apply(null, args), 0);\r\n        }\r\n        return setImmediate.apply(void 0, [cb].concat(args));\r\n    },\r\n    clearImmediate: function (id) {\r\n        /* istanbul ignore next */\r\n        if (!id)\r\n            return;\r\n        /* istanbul ignore if */\r\n        if (utils.BROWSER)\r\n            return clearTimeout(id); // tested separately\r\n        clearImmediate(id);\r\n    },\r\n    /**\r\n     *  Checks whether the given value is a promise.\r\n     *  @private\r\n     *  @param {any} value - Value to be checked.\r\n     *  @return {boolean}\r\n     */\r\n    isPromise: function (value) {\r\n        return value\r\n            && utils.type(value) === 'promise'\r\n            && typeof value.then === 'function';\r\n    }\r\n};\r\nexports.utils = utils;\r\n","\"use strict\";\r\n/* tslint:disable:no-empty */\r\nvar __assign = (this && this.__assign) || function () {\r\n    __assign = Object.assign || function(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\r\n                t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar _1 = require(\".\");\r\nvar utils_1 = require(\"./utils\");\r\n/**\r\n *  @private\r\n */\r\nvar DEFAULT_TASK_OPTIONS = Object.freeze({\r\n    enabled: true,\r\n    tickDelay: 0,\r\n    tickInterval: 1,\r\n    totalRuns: null,\r\n    startDate: null,\r\n    stopDate: null,\r\n    immediate: false,\r\n    removeOnCompleted: false,\r\n    callback: null,\r\n    meta: null\r\n});\r\n/**\r\n *  Represents the class that holds the configurations and the callback function\r\n *  required to run a task.\r\n *  @class\r\n */\r\nvar Task = /** @class */ (function () {\r\n    /**\r\n     *  Initializes a new instance of `Task` class.\r\n     *  @constructor\r\n     *  @param {ITaskOptions} options Task options.\r\n     */\r\n    function Task(options) {\r\n        this._init(options);\r\n    }\r\n    Object.defineProperty(Task.prototype, \"id\", {\r\n        // ---------------------------\r\n        // PUBLIC (INSTANCE) MEMBERS\r\n        // ---------------------------\r\n        /**\r\n         *  Gets the unique ID of the task.\r\n         *  @name Task#id\r\n         *  @type {string}\r\n         *  @readonly\r\n         */\r\n        get: function () {\r\n            return this._.id;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Task.prototype, \"enabled\", {\r\n        /**\r\n         *  Specifies whether this task is currently enabled. This essentially gives\r\n         *  you a manual control over execution. The task will always bypass the\r\n         *  callback while this is set to `false`.\r\n         *  @name Task#enabled\r\n         *  @type {boolean}\r\n         */\r\n        get: function () {\r\n            return this._.enabled;\r\n        },\r\n        set: function (value) {\r\n            this._.enabled = utils_1.utils.getBool(value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Task.prototype, \"tickDelay\", {\r\n        /**\r\n         *  Gets or sets the number of ticks to allow before running the task for\r\n         *  the first time.\r\n         *  @name Task#tickDelay\r\n         *  @type {number}\r\n         */\r\n        get: function () {\r\n            return this._.tickDelay;\r\n        },\r\n        set: function (value) {\r\n            this._.tickDelay = utils_1.utils.getNumber(value, 0, DEFAULT_TASK_OPTIONS.tickDelay);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Task.prototype, \"tickInterval\", {\r\n        /**\r\n         *  Gets or sets the tick interval that the task should be run on. The unit\r\n         *  is \"ticks\" (not milliseconds). For instance, if the timer interval is\r\n         *  `1000` milliseconds, and we add a task with `5` tick intervals. The task\r\n         *  will run on every `5` <b>seconds</b>.\r\n         *  @name Task#tickInterval\r\n         *  @type {number}\r\n         */\r\n        get: function () {\r\n            return this._.tickInterval;\r\n        },\r\n        set: function (value) {\r\n            this._.tickInterval = utils_1.utils.getNumber(value, 1, DEFAULT_TASK_OPTIONS.tickInterval);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Task.prototype, \"totalRuns\", {\r\n        /**\r\n         *  Gets or sets the total number of times the task should be run. `0` or\r\n         *  `null` means unlimited (until the timer has stopped).\r\n         *  @name Task#totalRuns\r\n         *  @type {number}\r\n         */\r\n        get: function () {\r\n            return this._.totalRuns;\r\n        },\r\n        set: function (value) {\r\n            this._.totalRuns = utils_1.utils.getNumber(value, 0, DEFAULT_TASK_OPTIONS.totalRuns);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Task.prototype, \"immediate\", {\r\n        /**\r\n         *  Specifies whether to wrap callback in a `setImmediate()` call before\r\n         *  executing. This can be useful if the task is not doing any I/O or using\r\n         *  any JS timers but synchronously blocking the event loop.\r\n         *  @name Task#immediate\r\n         *  @type {boolean}\r\n         */\r\n        get: function () {\r\n            return this._.immediate;\r\n        },\r\n        set: function (value) {\r\n            this._.immediate = utils_1.utils.getBool(value, false);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Task.prototype, \"currentRuns\", {\r\n        /**\r\n         *  Gets the number of times, this task has been run.\r\n         *  @name Task#currentRuns\r\n         *  @type {number}\r\n         *  @readonly\r\n         */\r\n        get: function () {\r\n            return this._.currentRuns;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Task.prototype, \"time\", {\r\n        /**\r\n         *  Gets time information for the lifetime of a task.\r\n         *  `#time.started` indicates the first execution time of a task.\r\n         *  `#time.stopped` indicates the last execution time of a task. (`0` if still running.)\r\n         *  `#time.elapsed` indicates the total lifetime of a task.\r\n         *  @name Task#time\r\n         *  @type {ITimeInfo}\r\n         *  @readonly\r\n         */\r\n        get: function () {\r\n            var started = this._.timeOnFirstRun || 0;\r\n            var stopped = this._.timeOnLastRun || 0;\r\n            return Object.freeze({\r\n                started: started,\r\n                stopped: stopped,\r\n                elapsed: stopped - started\r\n            });\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Task.prototype, \"callback\", {\r\n        /**\r\n         *  Gets the callback function to be executed on each run.\r\n         *  @name Task#callback\r\n         *  @type {TaskCallback}\r\n         *  @readonly\r\n         */\r\n        get: function () {\r\n            return this._.callback;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Task.prototype, \"removeOnCompleted\", {\r\n        /**\r\n         *  Gets or sets whether to remove the task (to free up memory) when task\r\n         *  has completed its executions (runs). For this to take affect, the task\r\n         *  should have `totalRuns` and/or `stopDate` configured.\r\n         *  @name Task#removeOnCompleted\r\n         *  @type {boolean}\r\n         */\r\n        get: function () {\r\n            return this._.removeOnCompleted;\r\n        },\r\n        set: function (value) {\r\n            this._.removeOnCompleted = utils_1.utils.getBool(value, false);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Task.prototype, \"completed\", {\r\n        /**\r\n         *  Specifies whether the task has completed all runs (executions) or\r\n         *  `stopDate` is reached. Note that if both `totalRuns` and `stopDate` are\r\n         *  omitted, this will never return `true`; since the task has no execution\r\n         *  limit set.\r\n         *  @name Task#completed\r\n         *  @type {boolean}\r\n         *  @readonly\r\n         */\r\n        get: function () {\r\n            // return faster if already completed\r\n            if (this._markedCompleted)\r\n                return true;\r\n            return Boolean((this.totalRuns && this.currentRuns >= this.totalRuns)\r\n                || (this._.stopDate && Date.now() >= this._.stopDate));\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Task.prototype, \"canRunOnTick\", {\r\n        /**\r\n         *  Specifies whether the task can run on the current tick of the timer.\r\n         *  @private\r\n         *  @name Task#canRunOnTick\r\n         *  @type {boolean}\r\n         *  @readonly\r\n         */\r\n        get: function () {\r\n            if (this._markedCompleted)\r\n                return false;\r\n            var tickCount = this._.startDate\r\n                ? Math.ceil((Date.now() - Number(this._.startDate)) / this._timer.interval)\r\n                : this._timer.tickCount;\r\n            var timeToRun = !this._.startDate || Date.now() >= this._.startDate;\r\n            var onInterval = tickCount > this.tickDelay && (tickCount - this.tickDelay) % this.tickInterval === 0;\r\n            return Boolean(timeToRun && onInterval);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     *  Resets the current number of runs. This will keep the task running for\r\n     *  the same amount of `tickIntervals` initially configured.\r\n     *  @memberof Task\r\n     *  @chainable\r\n     *\r\n     *  @param {ITaskBaseOptions} [options] If set, this will also re-configure the task.\r\n     *\r\n     *  @returns {Task}\r\n     */\r\n    Task.prototype.reset = function (options) {\r\n        this._.currentRuns = 0;\r\n        if (options) {\r\n            var id = options.id;\r\n            if (id && id !== this.id)\r\n                throw new Error('Cannot change ID of a task.');\r\n            options.id = this.id;\r\n            this._init(options);\r\n        }\r\n        return this;\r\n    };\r\n    /**\r\n     *  Serialization to JSON.\r\n     *\r\n     *  Never return string from `toJSON()`. It should return an object.\r\n     *  @private\r\n     */\r\n    Task.prototype.toJSON = function () {\r\n        var obj = __assign({}, this._);\r\n        delete obj.callback;\r\n        return obj;\r\n    };\r\n    // ---------------------------\r\n    // PRIVATE (INSTANCE) MEMBERS\r\n    // ---------------------------\r\n    /**\r\n     *  Set reference to timer itself.\r\n     *  Only called by `TaskTimer`.\r\n     *  @private\r\n     */\r\n    // @ts-ignore: TS6133: declared but never read.\r\n    Task.prototype._setTimer = function (timer) {\r\n        this._timer = timer;\r\n    };\r\n    /**\r\n     *  @private\r\n     */\r\n    Task.prototype._emit = function (name, object) {\r\n        var event = {\r\n            name: name,\r\n            source: this\r\n        };\r\n        /* istanbul ignore else */\r\n        if (object instanceof Error) {\r\n            event.error = object;\r\n        }\r\n        else {\r\n            event.data = object;\r\n        }\r\n        this._timer.emit(name, event);\r\n    };\r\n    /**\r\n     *  `TaskTimer` should be informed if this task is completed. But execution\r\n     *  should be finished. So we do this within the `done()` function.\r\n     *  @private\r\n     */\r\n    Task.prototype._done = function () {\r\n        if (this.completed) {\r\n            this._markedCompleted = true;\r\n            this._.timeOnLastRun = Date.now();\r\n            this._timer._taskCompleted(this);\r\n        }\r\n    };\r\n    /**\r\n     *  @private\r\n     */\r\n    Task.prototype._execCallback = function () {\r\n        var _this = this;\r\n        try {\r\n            var o = this.callback.apply(this, [this, function () { return _this._done(); }]);\r\n            if (this.callback.length >= 2) {\r\n                // handled by done() (called within the task callback by the user)\r\n            }\r\n            else if (utils_1.utils.isPromise(o)) {\r\n                o.then(function () {\r\n                    _this._done();\r\n                })\r\n                    .catch(function (err) {\r\n                    _this._emit(_1.TaskTimer.Event.TASK_ERROR, err);\r\n                });\r\n            }\r\n            else {\r\n                this._done();\r\n            }\r\n        }\r\n        catch (err) {\r\n            this._emit(_1.TaskTimer.Event.TASK_ERROR, err);\r\n        }\r\n    };\r\n    /**\r\n     *  Only used by `TaskTimer`.\r\n     *  @private\r\n     */\r\n    // @ts-ignore: TS6133: declared but never read.\r\n    Task.prototype._run = function (onRun) {\r\n        var _this = this;\r\n        if (!this.enabled || this._markedCompleted)\r\n            return;\r\n        if (this.currentRuns === 0)\r\n            this._.timeOnFirstRun = Date.now();\r\n        // current runs should be set before execution or it might flow if some\r\n        // async runs finishes faster and some other slower.\r\n        this._.currentRuns++;\r\n        onRun();\r\n        if (this.immediate) {\r\n            utils_1.utils.setImmediate(function () { return _this._execCallback(); });\r\n        }\r\n        else {\r\n            this._execCallback();\r\n        }\r\n    };\r\n    /**\r\n     *  @private\r\n     */\r\n    Task.prototype._init = function (options) {\r\n        if (!options || !options.id) {\r\n            throw new Error('A unique task ID is required.');\r\n        }\r\n        if (typeof options.callback !== 'function') {\r\n            throw new Error('A callback function is required for a task to run.');\r\n        }\r\n        var startDate = options.startDate, stopDate = options.stopDate;\r\n        if (startDate && stopDate && startDate >= stopDate) {\r\n            throw new Error('Task start date cannot be the same or after stop date.');\r\n        }\r\n        this._markedCompleted = false;\r\n        this._ = __assign({ currentRuns: 0 }, DEFAULT_TASK_OPTIONS);\r\n        this._.id = String(options.id);\r\n        this._.callback = options.callback;\r\n        this._.startDate = options.startDate || null;\r\n        this._.stopDate = options.stopDate || null;\r\n        // using setters for validation & default values\r\n        this.enabled = options.enabled;\r\n        this.tickDelay = options.tickDelay;\r\n        this.tickInterval = options.tickInterval;\r\n        this.totalRuns = options.totalRuns;\r\n        this.immediate = options.immediate;\r\n        this.removeOnCompleted = options.removeOnCompleted;\r\n    };\r\n    return Task;\r\n}());\r\nexports.Task = Task;\r\n","\"use strict\";\r\n/* tslint:disable:max-file-line-count */\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n// dep modules\r\nvar eventemitter3_1 = require(\"eventemitter3\");\r\n// own modules\r\nvar _1 = require(\".\");\r\nvar utils_1 = require(\"./utils\");\r\n/**\r\n *  @private\r\n */\r\nvar DEFAULT_TIMER_OPTIONS = Object.freeze({\r\n    interval: 1000,\r\n    precision: true,\r\n    stopOnCompleted: false,\r\n});\r\n/**\r\n *  TaskTimer • https://github.com/onury/tasktimer\r\n *  @license MIT\r\n *  @copyright 2019, Onur Yıldırım <onur@cutepilot.com>\r\n */\r\n// ---------------------------\r\n// EventEmitter Docs\r\n// ---------------------------\r\n/**\r\n *  Calls each of the listeners registered for a given event name.\r\n *  @name TaskTimer#emit\r\n *  @function\r\n *\r\n *  @param {TaskTimer.Event} eventName - The name of the event to be emitted.\r\n *  @param {any} [data] - Data to be passed to event listeners.\r\n *\r\n *  @returns {Boolean} - `true` if the event had listeners, else `false`.\r\n */\r\n/**\r\n *  Return an array listing the events for which the emitter has registered\r\n *  listeners.\r\n *  @name TaskTimer#eventNames\r\n *  @function\r\n *\r\n *  @returns {Array} - List of event names.\r\n */\r\n/**\r\n *  Adds the listener function to the end of the listeners array for the event\r\n *  named `eventName`. No checks are made to see if the listener has already\r\n *  been added. Multiple calls passing the same combination of `eventName` and\r\n *  `listener` will result in the listener being added, and called, multiple\r\n *  times.\r\n *  @name TaskTimer#on\r\n *  @function\r\n *  @alias TaskTimer#addListener\r\n *  @chainable\r\n *\r\n *  @param {TaskTimer.Event} eventName - The name of the event to be added.\r\n *  @param {Function} listener - The callback function to be invoked per event.\r\n *  @param {*} [context=this] - The context to invoke the listener with.\r\n *\r\n *  @returns {TaskTimer} - `{@link #TaskTimer|TaskTimer}` instance.\r\n *\r\n *  @example\r\n *  const timer = new TaskTimer(1000);\r\n *  // add a listener to be invoked when timer has stopped.\r\n *  timer.on(TaskTimer.Event.STOPPED, () => {\r\n *      console.log('Timer has stopped!');\r\n *  });\r\n *  timer.start();\r\n */\r\n/**\r\n *  Adds a one time listener function for the event named `eventName`. The next\r\n *  time `eventName` is triggered, this `listener` is removed and then invoked.\r\n *  @name TaskTimer#once\r\n *  @function\r\n *  @chainable\r\n *\r\n *  @param {TaskTimer.Event} eventName - The name of the event to be added.\r\n *  @param {Function} listener - The callback function to be invoked per event.\r\n *  @param {*} [context=this] - The context to invoke the listener with.\r\n *\r\n *  @returns {TaskTimer} - `{@link #TaskTimer|TaskTimer}` instance.\r\n */\r\n/**\r\n *  Removes the specified `listener` from the listener array for the event\r\n *  named `eventName`.\r\n *  @name TaskTimer#off\r\n *  @function\r\n *  @alias TaskTimer#removeListener\r\n *  @chainable\r\n *\r\n *  @param {TaskTimer.Event} eventName - The name of the event to be removed.\r\n *  @param {Function} listener - The callback function to be invoked per event.\r\n *  @param {*} [context=this] - Only remove the listeners that have this context.\r\n *  @param {Boolean} [once=false] - Only remove one-time listeners.\r\n *\r\n *  @returns {TaskTimer} - `{@link #TaskTimer|TaskTimer}` instance.\r\n */\r\n/**\r\n *  Gets the number of listeners listening to a given event.\r\n *  @name TaskTimer#listenerCount\r\n *  @function\r\n *\r\n *  @param {TaskTimer.Event} eventName - The name of the event.\r\n *\r\n *  @returns {Number} - The number of listeners.\r\n */\r\n/**\r\n *  Gets the listeners registered for a given event.\r\n *  @name TaskTimer#listeners\r\n *  @function\r\n *\r\n *  @param {TaskTimer.Event} eventName - The name of the event.\r\n *\r\n *  @returns {Array} - The registered listeners.\r\n */\r\n/**\r\n *  Removes all listeners, or those of the specified `eventName`.\r\n *  @name TaskTimer#removeAllListeners\r\n *  @function\r\n *  @chainable\r\n *\r\n *  @param {TaskTimer.Event} [eventName] - The name of the event to be removed.\r\n *\r\n *  @returns {TaskTimer} - `{@link #TaskTimer|TaskTimer}` instance.\r\n */\r\n/**\r\n *  A timer utility for running periodic tasks on the given interval ticks. This\r\n *  is useful when you want to run or schedule multiple tasks on a single timer\r\n *  instance.\r\n *\r\n *  This class extends `EventEmitter3` which is an `EventEmitter` implementation\r\n *  for both Node and browser. For detailed information, refer to Node.js\r\n *  documentation.\r\n *  @class\r\n *  @global\r\n *\r\n *  @extends EventEmitter\r\n *\r\n *  @see\r\n *  {@link https://nodejs.org/api/events.html#events_class_eventemitter|EventEmitter}\r\n */\r\nvar TaskTimer = /** @class */ (function (_super) {\r\n    __extends(TaskTimer, _super);\r\n    // ---------------------------\r\n    // CONSTRUCTOR\r\n    // ---------------------------\r\n    /**\r\n     *  Constructs a new `TaskTimer` instance with the given time interval (in\r\n     *  milliseconds).\r\n     *  @constructor\r\n     *\r\n     *  @param {ITaskTimerOptions|number} [options] - Either TaskTimer options\r\n     *  or a base interval (in milliseconds). Since the tasks run on ticks\r\n     *  instead of millisecond intervals; this value operates as the base\r\n     *  resolution for all tasks. If you are running heavy tasks, lower interval\r\n     *  requires higher CPU power. This value can be updated any time by setting\r\n     *  the `interval` property on the instance.\r\n     *\r\n     *  @example\r\n     *  const timer = new TaskTimer(1000); // milliseconds\r\n     *  // Execute some code on each tick...\r\n     *  timer.on('tick', () => {\r\n     *      console.log('tick count: ' + timer.tickCount);\r\n     *      console.log('elapsed time: ' + timer.time.elapsed + ' ms.');\r\n     *  });\r\n     *  // add a task named 'heartbeat' that runs every 5 ticks and a total of 10 times.\r\n     *  const task1 = {\r\n     *      id: 'heartbeat',\r\n     *      tickDelay: 20,   // ticks (to wait before first run)\r\n     *      tickInterval: 5, // ticks (interval)\r\n     *      totalRuns: 10,   // times to run\r\n     *      callback(task) { // can also be an async function, returning a promise\r\n     *          console.log(task.id + ' task has run ' + task.currentRuns + ' times.');\r\n     *      }\r\n     *  };\r\n     *  timer.add(task1).start();\r\n     */\r\n    function TaskTimer(options) {\r\n        var _this = _super.call(this) || this;\r\n        _this._timeoutRef = null;\r\n        _this._immediateRef = null;\r\n        _this._runCount = 0;\r\n        _this._reset();\r\n        _this._.opts = {};\r\n        var opts = typeof options === \"number\"\r\n            ? { interval: options }\r\n            : options || {};\r\n        _this.interval = opts.interval;\r\n        _this.precision = opts.precision;\r\n        _this.stopOnCompleted = opts.stopOnCompleted;\r\n        return _this;\r\n    }\r\n    Object.defineProperty(TaskTimer.prototype, \"interval\", {\r\n        // ---------------------------\r\n        // PUBLIC (INSTANCE) PROPERTIES\r\n        // ---------------------------\r\n        /**\r\n         *  Gets or sets the base timer interval in milliseconds.\r\n         *\r\n         *  Since the tasks run on ticks instead of millisecond intervals; this\r\n         *  value operates as the base resolution for all tasks. If you are running\r\n         *  heavy tasks, lower interval requires higher CPU power. This value can be\r\n         *  updated any time.\r\n         *\r\n         *  @name TaskTimer#interval\r\n         *  @type {number}\r\n         */\r\n        get: function () {\r\n            return this._.opts.interval;\r\n        },\r\n        set: function (value) {\r\n            this._.opts.interval = utils_1.utils.getNumber(value, 20, DEFAULT_TIMER_OPTIONS.interval);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TaskTimer.prototype, \"precision\", {\r\n        /**\r\n         *  Gets or sets whether timer precision enabled.\r\n         *\r\n         *  Because of the single-threaded, asynchronous nature of JavaScript, each\r\n         *  execution takes a piece of CPU time, and the time they have to wait will\r\n         *  vary, depending on the load. This creates a latency and cumulative\r\n         *  difference in asynchronous timers; that gradually increase the\r\n         *  inacuraccy. `TaskTimer` overcomes this problem as much as possible:\r\n         *\r\n         *  <li>The delay between each tick is auto-adjusted when it's off\r\n         *  due to task/CPU loads or clock drifts.</li>\r\n         *  <li>In Node.js, `TaskTimer` also makes use of `process.hrtime()`\r\n         *  high-resolution real-time. The time is relative to an arbitrary\r\n         *  time in the past (not related to the time of day) and therefore not\r\n         *  subject to clock drifts.</li>\r\n         *  <li>The timer may hit a synchronous / blocking task; or detect significant\r\n         *  time drift (longer than the base interval) due to JS event queue, which\r\n         *  cannot be recovered by simply adjusting the next delay. In this case, right\r\n         *  from the next tick onward; it will auto-recover as much as possible by\r\n         *  running \"immediate\" tasks until it reaches the proper time vs tick/run\r\n         *  balance.</li>\r\n         *\r\n         *  <blockquote><i>Note that precision will be as high as possible but it still\r\n         *  can be off by a few milliseconds; depending on the CPU or the load.</i>\r\n         *  </blockquote>\r\n         *  @name TaskTimer#precision\r\n         *  @type {boolean}\r\n         */\r\n        get: function () {\r\n            return this._.opts.precision;\r\n        },\r\n        set: function (value) {\r\n            this._.opts.precision = utils_1.utils.getBool(value, DEFAULT_TIMER_OPTIONS.precision);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TaskTimer.prototype, \"stopOnCompleted\", {\r\n        /**\r\n         *  Gets or sets whether the timer should automatically stop when all tasks\r\n         *  are completed. For this to take affect, all added tasks should have\r\n         *  `totalRuns` and/or `stopDate` configured. This option can be set/changed\r\n         *  at any time.\r\n         *  @name TaskTimer#stopOnCompleted\r\n         *  @type {boolean}\r\n         */\r\n        get: function () {\r\n            return this._.opts.stopOnCompleted;\r\n        },\r\n        set: function (value) {\r\n            this._.opts.stopOnCompleted = utils_1.utils.getBool(value, DEFAULT_TIMER_OPTIONS.stopOnCompleted);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TaskTimer.prototype, \"state\", {\r\n        /**\r\n         *  Gets the current state of the timer.\r\n         *  For possible values, see `TaskTimer.State` enumeration.\r\n         *  @name TaskTimer#state\r\n         *  @type {TaskTimer.State}\r\n         *  @readonly\r\n         */\r\n        get: function () {\r\n            return this._.state;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TaskTimer.prototype, \"time\", {\r\n        /**\r\n         *  Gets time information for the latest run of the timer.\r\n         *  `#time.started` indicates the start time of the timer.\r\n         *  `#time.stopped` indicates the stop time of the timer. (`0` if still running.)\r\n         *  `#time.elapsed` indicates the elapsed time of the timer.\r\n         *  @name TaskTimer#time\r\n         *  @type {ITimeInfo}\r\n         *  @readonly\r\n         */\r\n        get: function () {\r\n            var _a = this._, startTime = _a.startTime, stopTime = _a.stopTime;\r\n            var t = {\r\n                started: startTime,\r\n                stopped: stopTime,\r\n                elapsed: 0,\r\n            };\r\n            if (startTime) {\r\n                var current = this.state !== TaskTimer.State.STOPPED ? Date.now() : stopTime;\r\n                t.elapsed = current - startTime;\r\n            }\r\n            return Object.freeze(t);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TaskTimer.prototype, \"tickCount\", {\r\n        /**\r\n         *  Gets the current tick count for the latest run of the timer.\r\n         *  This value will be reset to `0` when the timer is stopped or reset.\r\n         *  @name TaskTimer#tickCount\r\n         *  @type {Number}\r\n         *  @readonly\r\n         */\r\n        get: function () {\r\n            return this._.tickCount;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TaskTimer.prototype, \"taskCount\", {\r\n        /**\r\n         *  Gets the current task count. Tasks remain even after the timer is\r\n         *  stopped. But they will be removed if the timer is reset.\r\n         *  @name TaskTimer#taskCount\r\n         *  @type {Number}\r\n         *  @readonly\r\n         */\r\n        get: function () {\r\n            return Object.keys(this._.tasks).length;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TaskTimer.prototype, \"taskRunCount\", {\r\n        /**\r\n         *  Gets the total number of all task executions (runs).\r\n         *  @name TaskTimer#taskRunCount\r\n         *  @type {Number}\r\n         *  @readonly\r\n         */\r\n        get: function () {\r\n            return this._.taskRunCount;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TaskTimer.prototype, \"runCount\", {\r\n        /**\r\n         *  Gets the total number of timer runs, including resumed runs.\r\n         *  @name TaskTimer#runCount\r\n         *  @type {Number}\r\n         *  @readonly\r\n         */\r\n        get: function () {\r\n            return this._runCount;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    // ---------------------------\r\n    // PUBLIC (INSTANCE) METHODS\r\n    // ---------------------------\r\n    /**\r\n     *  Gets the task with the given ID.\r\n     *  @memberof TaskTimer\r\n     *\r\n     *  @param {String} id - ID of the task.\r\n     *\r\n     *  @returns {Task}\r\n     */\r\n    TaskTimer.prototype.get = function (id) {\r\n        return this._.tasks[id] || null;\r\n    };\r\n    // TODO implement this\r\n    /**\r\n     *  Gets array of ids of all tasks\r\n     *  @memberof TaskTimer\r\n     *\r\n     *  @returns Array<String>\r\n     */\r\n    TaskTimer.prototype.getAllTask = function () {\r\n        return Object.keys(this._.tasks) || [];\r\n    };\r\n    /**\r\n     *  Adds a collection of new tasks for the timer.\r\n     *  @memberof TaskTimer\r\n     *  @chainable\r\n     *\r\n     *  @param {Task|ITaskOptions|TaskCallback|Array} task - Either a\r\n     *  single task, task options object or the callback function; or a mixture\r\n     *  of these as an array.\r\n     *\r\n     *  @returns {TaskTimer}\r\n     *\r\n     *  @throws {Error} - If a task callback is not set or a task with the given\r\n     *  name already exists.\r\n     */\r\n    TaskTimer.prototype.add = function (task) {\r\n        var _this = this;\r\n        if (!utils_1.utils.isset(task)) {\r\n            throw new Error(\"Either a task, task options or a callback is required.\");\r\n        }\r\n        utils_1.utils.ensureArray(task).forEach(function (item) { return _this._add(item); });\r\n        return this;\r\n    };\r\n    /**\r\n     *  Removes the task by the given name.\r\n     *  @memberof TaskTimer\r\n     *  @chainable\r\n     *\r\n     *  @param {string|Task} task - Task to be removed. Either pass the\r\n     *  name or the task itself.\r\n     *\r\n     *  @returns {TaskTimer}\r\n     *\r\n     *  @throws {Error} - If a task with the given name does not exist.\r\n     */\r\n    TaskTimer.prototype.remove = function (task) {\r\n        var id = typeof task === \"string\" ? task : task.id;\r\n        task = this.get(id);\r\n        if (!id || !task) {\r\n            throw new Error(\"No tasks exist with ID: '\" + id + \"'.\");\r\n        }\r\n        // first decrement completed tasks count if this is a completed task.\r\n        if (task.completed && this._.completedTaskCount > 0)\r\n            this._.completedTaskCount--;\r\n        this._.tasks[id] = null;\r\n        delete this._.tasks[id];\r\n        this._emit(TaskTimer.Event.TASK_REMOVED, task);\r\n        return this;\r\n    };\r\n    /**\r\n     *  Starts the timer and puts the timer in `RUNNING` state. If it's already\r\n     *  running, this will reset the start/stop time and tick count, but will not\r\n     *  reset (or remove) existing tasks.\r\n     *  @memberof TaskTimer\r\n     *  @chainable\r\n     *\r\n     *  @returns {TaskTimer}\r\n     */\r\n    TaskTimer.prototype.start = function () {\r\n        this._stop();\r\n        this._.state = TaskTimer.State.RUNNING;\r\n        this._runCount++;\r\n        this._.tickCount = 0;\r\n        this._.taskRunCount = 0;\r\n        this._.stopTime = 0;\r\n        this._markTime();\r\n        this._.startTime = Date.now();\r\n        this._emit(TaskTimer.Event.STARTED);\r\n        this._run();\r\n        return this;\r\n    };\r\n    /**\r\n     *  Pauses the timer, puts the timer in `PAUSED` state and all tasks on hold.\r\n     *  @memberof TaskTimer\r\n     *  @chainable\r\n     *\r\n     *  @returns {TaskTimer}\r\n     */\r\n    TaskTimer.prototype.pause = function () {\r\n        if (this.state !== TaskTimer.State.RUNNING)\r\n            return this;\r\n        this._stop();\r\n        this._.state = TaskTimer.State.PAUSED;\r\n        this._emit(TaskTimer.Event.PAUSED);\r\n        return this;\r\n    };\r\n    /**\r\n     *  Resumes the timer and puts the timer in `RUNNING` state; if previuosly\r\n     *  paused. In this state, all existing tasks are resumed.\r\n     *  @memberof TaskTimer\r\n     *  @chainable\r\n     *\r\n     *  @returns {TaskTimer}\r\n     */\r\n    TaskTimer.prototype.resume = function () {\r\n        if (this.state === TaskTimer.State.IDLE) {\r\n            this.start();\r\n            return this;\r\n        }\r\n        if (this.state !== TaskTimer.State.PAUSED)\r\n            return this;\r\n        this._runCount++;\r\n        this._markTime();\r\n        this._.state = TaskTimer.State.RUNNING;\r\n        this._emit(TaskTimer.Event.RESUMED);\r\n        this._run();\r\n        return this;\r\n    };\r\n    /**\r\n     *  Stops the timer and puts the timer in `STOPPED` state. In this state, all\r\n     *  existing tasks are stopped and no values or tasks are reset until\r\n     *  re-started or explicitly calling reset.\r\n     *  @memberof TaskTimer\r\n     *  @chainable\r\n     *\r\n     *  @returns {TaskTimer}\r\n     */\r\n    TaskTimer.prototype.stop = function () {\r\n        if (this.state !== TaskTimer.State.RUNNING)\r\n            return this;\r\n        this._stop();\r\n        this._.stopTime = Date.now();\r\n        this._.state = TaskTimer.State.STOPPED;\r\n        this._emit(TaskTimer.Event.STOPPED);\r\n        return this;\r\n    };\r\n    /**\r\n     *  Stops the timer and puts the timer in `IDLE` state.\r\n     *  This will reset the ticks and removes all tasks silently; meaning no\r\n     *  other events will be emitted such as `\"taskRemoved\"`.\r\n     *  @memberof TaskTimer\r\n     *  @chainable\r\n     *\r\n     *  @returns {TaskTimer}\r\n     */\r\n    TaskTimer.prototype.reset = function () {\r\n        this._reset();\r\n        this._emit(TaskTimer.Event.RESET);\r\n        return this;\r\n    };\r\n    // ---------------------------\r\n    // PRIVATE (INSTANCE) METHODS\r\n    // ---------------------------\r\n    /**\r\n     *  @private\r\n     */\r\n    TaskTimer.prototype._emit = function (type, data) {\r\n        var event = {\r\n            name: type,\r\n            source: this,\r\n            data: data,\r\n        };\r\n        return this.emit(type, event);\r\n    };\r\n    /**\r\n     *  Adds a new task for the timer.\r\n     *  @private\r\n     *\r\n     *  @param {Task|ITaskOptions|TaskCallback} options - Either a task instance,\r\n     *  task options object or the callback function to be executed on tick\r\n     *  intervals.\r\n     *\r\n     *  @returns {TaskTimer}\r\n     *\r\n     *  @throws {Error} - If the task callback is not set or a task with the\r\n     *  given name already exists.\r\n     */\r\n    TaskTimer.prototype._add = function (options) {\r\n        if (typeof options === \"function\") {\r\n            options = {\r\n                callback: options,\r\n            };\r\n        }\r\n        if (utils_1.utils.type(options) === \"object\" && !options.id) {\r\n            options.id = this._getUniqueTaskID();\r\n        }\r\n        if (this.get(options.id)) {\r\n            throw new Error(\"A task with id '\" + options.id + \"' already exists.\");\r\n        }\r\n        var task = options instanceof _1.Task ? options : new _1.Task(options);\r\n        task._setTimer(this);\r\n        this._.tasks[task.id] = task;\r\n        this._emit(TaskTimer.Event.TASK_ADDED, task);\r\n        return this;\r\n    };\r\n    /**\r\n     *  Stops the timer.\r\n     *  @private\r\n     */\r\n    TaskTimer.prototype._stop = function () {\r\n        this._.tickCountAfterResume = 0;\r\n        if (this._timeoutRef) {\r\n            clearTimeout(this._timeoutRef);\r\n            this._timeoutRef = null;\r\n        }\r\n        if (this._immediateRef) {\r\n            utils_1.utils.clearImmediate(this._immediateRef);\r\n            this._immediateRef = null;\r\n        }\r\n    };\r\n    /**\r\n     *  Resets the timer.\r\n     *  @private\r\n     */\r\n    TaskTimer.prototype._reset = function () {\r\n        this._ = {\r\n            opts: (this._ || {}).opts,\r\n            state: TaskTimer.State.IDLE,\r\n            tasks: {},\r\n            tickCount: 0,\r\n            taskRunCount: 0,\r\n            startTime: 0,\r\n            stopTime: 0,\r\n            completedTaskCount: 0,\r\n            resumeTime: 0,\r\n            hrResumeTime: null,\r\n            tickCountAfterResume: 0,\r\n        };\r\n        this._stop();\r\n    };\r\n    /**\r\n     *  Called (by Task instance) when it has completed all of its runs.\r\n     *  @private\r\n     */\r\n    // @ts-ignore: TS6133: declared but never read.\r\n    TaskTimer.prototype._taskCompleted = function (task) {\r\n        this._.completedTaskCount++;\r\n        this._emit(TaskTimer.Event.TASK_COMPLETED, task);\r\n        if (this._.completedTaskCount === this.taskCount) {\r\n            this._emit(TaskTimer.Event.COMPLETED);\r\n            if (this.stopOnCompleted)\r\n                this.stop();\r\n        }\r\n        if (task.removeOnCompleted)\r\n            this.remove(task);\r\n    };\r\n    /**\r\n     *  Handler to be executed on each tick.\r\n     *  @private\r\n     */\r\n    TaskTimer.prototype._tick = function () {\r\n        var _this = this;\r\n        this._.state = TaskTimer.State.RUNNING;\r\n        var id;\r\n        var task;\r\n        var tasks = this._.tasks;\r\n        this._.tickCount++;\r\n        this._.tickCountAfterResume++;\r\n        this._emit(TaskTimer.Event.TICK);\r\n        // tslint:disable:forin\r\n        for (id in tasks) {\r\n            task = tasks[id];\r\n            if (!task || !task.canRunOnTick)\r\n                continue;\r\n            // below will not execute if task is disabled or already\r\n            // completed.\r\n            task._run(function () {\r\n                _this._.taskRunCount++;\r\n                _this._emit(TaskTimer.Event.TASK, task);\r\n            });\r\n        }\r\n        this._run();\r\n    };\r\n    /**\r\n     *  Marks the resume (or start) time in milliseconds or high-resolution time\r\n     *  if available.\r\n     *  @private\r\n     */\r\n    TaskTimer.prototype._markTime = function () {\r\n        /* istanbul ignore if */\r\n        if (utils_1.utils.BROWSER) {\r\n            // tested separately\r\n            this._.resumeTime = Date.now();\r\n        }\r\n        else {\r\n            this._.hrResumeTime = process.hrtime();\r\n        }\r\n    };\r\n    /**\r\n     *  Gets the time difference in milliseconds sinct the last resume or start\r\n     *  time.\r\n     *  @private\r\n     */\r\n    TaskTimer.prototype._getTimeDiff = function () {\r\n        // Date.now() is ~2x faster than Date#getTime()\r\n        /* istanbul ignore if */\r\n        if (utils_1.utils.BROWSER)\r\n            return Date.now() - this._.resumeTime; // tested separately\r\n        var hrDiff = process.hrtime(this._.hrResumeTime);\r\n        return Math.ceil(hrDiff[0] * 1000 + hrDiff[1] / 1e6);\r\n    };\r\n    /**\r\n     *  Runs the timer.\r\n     *  @private\r\n     */\r\n    TaskTimer.prototype._run = function () {\r\n        var _this = this;\r\n        if (this.state !== TaskTimer.State.RUNNING)\r\n            return;\r\n        var interval = this.interval;\r\n        // we'll get a precise interval by checking if our clock is already\r\n        // drifted.\r\n        if (this.precision) {\r\n            var diff = this._getTimeDiff();\r\n            // did we reach this expected tick count for the given time period?\r\n            // calculated count should not be greater than tickCountAfterResume\r\n            if (Math.floor(diff / interval) > this._.tickCountAfterResume) {\r\n                // if we're really late, run immediately!\r\n                this._immediateRef = utils_1.utils.setImmediate(function () { return _this._tick(); });\r\n                return;\r\n            }\r\n            // if we still have time but a bit off, update next interval.\r\n            interval = interval - (diff % interval);\r\n        }\r\n        this._timeoutRef = setTimeout(function () { return _this._tick(); }, interval);\r\n    };\r\n    /**\r\n     *  Gets a unique task ID.\r\n     *  @private\r\n     */\r\n    TaskTimer.prototype._getUniqueTaskID = function () {\r\n        var num = this.taskCount;\r\n        var id;\r\n        while (!id || this.get(id)) {\r\n            num++;\r\n            id = \"task\" + num;\r\n        }\r\n        return id;\r\n    };\r\n    return TaskTimer;\r\n}(eventemitter3_1.EventEmitter));\r\nexports.TaskTimer = TaskTimer;\r\n// ---------------------------\r\n// NAMESPACE\r\n// ---------------------------\r\n// tslint:disable:no-namespace\r\n/* istanbul ignore next */\r\n/** @private */\r\n(function (TaskTimer) {\r\n    /**\r\n     *  Represents the class that holds the configurations and the callback function\r\n     *  required to run a task. See {@link api/#Task|class information}.\r\n     *  @name TaskTimer.Task\r\n     *  @class\r\n     */\r\n    TaskTimer.Task = _1.Task;\r\n    /**\r\n     *  Enumerates `TaskTimer` states.\r\n     *  @memberof TaskTimer\r\n     *  @enum {String}\r\n     *  @readonly\r\n     */\r\n    var State;\r\n    (function (State) {\r\n        /**\r\n         *  Indicates that the timer is in `idle` state.\r\n         *  This is the initial state when the `TaskTimer` instance is first created.\r\n         *  Also when an existing timer is reset, it will be `idle`.\r\n         *  @type {String}\r\n         */\r\n        State[\"IDLE\"] = \"idle\";\r\n        /**\r\n         *  Indicates that the timer is in `running` state; such as when the timer is\r\n         *  started or resumed.\r\n         *  @type {String}\r\n         */\r\n        State[\"RUNNING\"] = \"running\";\r\n        /**\r\n         *  Indicates that the timer is in `paused` state.\r\n         *  @type {String}\r\n         */\r\n        State[\"PAUSED\"] = \"paused\";\r\n        /**\r\n         *  Indicates that the timer is in `stopped` state.\r\n         *  @type {String}\r\n         */\r\n        State[\"STOPPED\"] = \"stopped\";\r\n    })(State = TaskTimer.State || (TaskTimer.State = {}));\r\n    /**\r\n     *  Enumerates the `TaskTimer` event types.\r\n     *  @memberof TaskTimer\r\n     *  @enum {String}\r\n     *  @readonly\r\n     */\r\n    var Event;\r\n    (function (Event) {\r\n        /**\r\n         *  Emitted on each tick (interval) of `TaskTimer`.\r\n         *  @type {String}\r\n         */\r\n        Event[\"TICK\"] = \"tick\";\r\n        /**\r\n         *  Emitted when the timer is put in `RUNNING` state; such as when the timer is\r\n         *  started.\r\n         *  @type {String}\r\n         */\r\n        Event[\"STARTED\"] = \"started\";\r\n        /**\r\n         *  Emitted when the timer is put in `RUNNING` state; such as when the timer is\r\n         *  resumed.\r\n         *  @type {String}\r\n         */\r\n        Event[\"RESUMED\"] = \"resumed\";\r\n        /**\r\n         *  Emitted when the timer is put in `PAUSED` state.\r\n         *  @type {String}\r\n         */\r\n        Event[\"PAUSED\"] = \"paused\";\r\n        /**\r\n         *  Emitted when the timer is put in `STOPPED` state.\r\n         *  @type {String}\r\n         */\r\n        Event[\"STOPPED\"] = \"stopped\";\r\n        /**\r\n         *  Emitted when the timer is reset.\r\n         *  @type {String}\r\n         */\r\n        Event[\"RESET\"] = \"reset\";\r\n        /**\r\n         *  Emitted when a task is executed.\r\n         *  @type {String}\r\n         */\r\n        Event[\"TASK\"] = \"task\";\r\n        /**\r\n         *  Emitted when a task is added to `TaskTimer` instance.\r\n         *  @type {String}\r\n         */\r\n        Event[\"TASK_ADDED\"] = \"taskAdded\";\r\n        /**\r\n         *  Emitted when a task is removed from `TaskTimer` instance.\r\n         *  Note that this will not be emitted when `.reset()` is called; which\r\n         *  removes all tasks silently.\r\n         *  @type {String}\r\n         */\r\n        Event[\"TASK_REMOVED\"] = \"taskRemoved\";\r\n        /**\r\n         *  Emitted when a task has completed all of its executions (runs)\r\n         *  or reached its stopping date/time (if set). Note that this event\r\n         *  will only be fired if the tasks has a `totalRuns` limit or a\r\n         *  `stopDate` value set.\r\n         *  @type {String}\r\n         */\r\n        Event[\"TASK_COMPLETED\"] = \"taskCompleted\";\r\n        /**\r\n         *  Emitted when a task produces an error on its execution.\r\n         *  @type {String}\r\n         */\r\n        Event[\"TASK_ERROR\"] = \"taskError\";\r\n        /**\r\n         *  Emitted when all tasks have completed all of their executions (runs)\r\n         *  or reached their stopping date/time (if set). Note that this event\r\n         *  will only be fired if all tasks have a `totalRuns` limit or a\r\n         *  `stopDate` value set.\r\n         *  @type {String}\r\n         */\r\n        Event[\"COMPLETED\"] = \"completed\";\r\n    })(Event = TaskTimer.Event || (TaskTimer.Event = {}));\r\n})(TaskTimer || (TaskTimer = {}));\r\nexports.TaskTimer = TaskTimer;\r\n","'use strict';\n\nvar has = Object.prototype.hasOwnProperty\n  , prefix = '~';\n\n/**\n * Constructor to create a storage for our `EE` objects.\n * An `Events` instance is a plain object whose properties are event names.\n *\n * @constructor\n * @private\n */\nfunction Events() {}\n\n//\n// We try to not inherit from `Object.prototype`. In some engines creating an\n// instance in this way is faster than calling `Object.create(null)` directly.\n// If `Object.create(null)` is not supported we prefix the event names with a\n// character to make sure that the built-in object properties are not\n// overridden or used as an attack vector.\n//\nif (Object.create) {\n  Events.prototype = Object.create(null);\n\n  //\n  // This hack is needed because the `__proto__` property is still inherited in\n  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.\n  //\n  if (!new Events().__proto__) prefix = false;\n}\n\n/**\n * Representation of a single event listener.\n *\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} [once=false] Specify if the listener is a one-time listener.\n * @constructor\n * @private\n */\nfunction EE(fn, context, once) {\n  this.fn = fn;\n  this.context = context;\n  this.once = once || false;\n}\n\n/**\n * Add a listener for a given event.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} once Specify if the listener is a one-time listener.\n * @returns {EventEmitter}\n * @private\n */\nfunction addListener(emitter, event, fn, context, once) {\n  if (typeof fn !== 'function') {\n    throw new TypeError('The listener must be a function');\n  }\n\n  var listener = new EE(fn, context || emitter, once)\n    , evt = prefix ? prefix + event : event;\n\n  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;\n  else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);\n  else emitter._events[evt] = [emitter._events[evt], listener];\n\n  return emitter;\n}\n\n/**\n * Clear event by name.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} evt The Event name.\n * @private\n */\nfunction clearEvent(emitter, evt) {\n  if (--emitter._eventsCount === 0) emitter._events = new Events();\n  else delete emitter._events[evt];\n}\n\n/**\n * Minimal `EventEmitter` interface that is molded against the Node.js\n * `EventEmitter` interface.\n *\n * @constructor\n * @public\n */\nfunction EventEmitter() {\n  this._events = new Events();\n  this._eventsCount = 0;\n}\n\n/**\n * Return an array listing the events for which the emitter has registered\n * listeners.\n *\n * @returns {Array}\n * @public\n */\nEventEmitter.prototype.eventNames = function eventNames() {\n  var names = []\n    , events\n    , name;\n\n  if (this._eventsCount === 0) return names;\n\n  for (name in (events = this._events)) {\n    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);\n  }\n\n  if (Object.getOwnPropertySymbols) {\n    return names.concat(Object.getOwnPropertySymbols(events));\n  }\n\n  return names;\n};\n\n/**\n * Return the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Array} The registered listeners.\n * @public\n */\nEventEmitter.prototype.listeners = function listeners(event) {\n  var evt = prefix ? prefix + event : event\n    , handlers = this._events[evt];\n\n  if (!handlers) return [];\n  if (handlers.fn) return [handlers.fn];\n\n  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {\n    ee[i] = handlers[i].fn;\n  }\n\n  return ee;\n};\n\n/**\n * Return the number of listeners listening to a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Number} The number of listeners.\n * @public\n */\nEventEmitter.prototype.listenerCount = function listenerCount(event) {\n  var evt = prefix ? prefix + event : event\n    , listeners = this._events[evt];\n\n  if (!listeners) return 0;\n  if (listeners.fn) return 1;\n  return listeners.length;\n};\n\n/**\n * Calls each of the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Boolean} `true` if the event had listeners, else `false`.\n * @public\n */\nEventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return false;\n\n  var listeners = this._events[evt]\n    , len = arguments.length\n    , args\n    , i;\n\n  if (listeners.fn) {\n    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);\n\n    switch (len) {\n      case 1: return listeners.fn.call(listeners.context), true;\n      case 2: return listeners.fn.call(listeners.context, a1), true;\n      case 3: return listeners.fn.call(listeners.context, a1, a2), true;\n      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;\n      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;\n      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;\n    }\n\n    for (i = 1, args = new Array(len -1); i < len; i++) {\n      args[i - 1] = arguments[i];\n    }\n\n    listeners.fn.apply(listeners.context, args);\n  } else {\n    var length = listeners.length\n      , j;\n\n    for (i = 0; i < length; i++) {\n      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);\n\n      switch (len) {\n        case 1: listeners[i].fn.call(listeners[i].context); break;\n        case 2: listeners[i].fn.call(listeners[i].context, a1); break;\n        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;\n        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;\n        default:\n          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {\n            args[j - 1] = arguments[j];\n          }\n\n          listeners[i].fn.apply(listeners[i].context, args);\n      }\n    }\n  }\n\n  return true;\n};\n\n/**\n * Add a listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.on = function on(event, fn, context) {\n  return addListener(this, event, fn, context, false);\n};\n\n/**\n * Add a one-time listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.once = function once(event, fn, context) {\n  return addListener(this, event, fn, context, true);\n};\n\n/**\n * Remove the listeners of a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn Only remove the listeners that match this function.\n * @param {*} context Only remove the listeners that have this context.\n * @param {Boolean} once Only remove one-time listeners.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return this;\n  if (!fn) {\n    clearEvent(this, evt);\n    return this;\n  }\n\n  var listeners = this._events[evt];\n\n  if (listeners.fn) {\n    if (\n      listeners.fn === fn &&\n      (!once || listeners.once) &&\n      (!context || listeners.context === context)\n    ) {\n      clearEvent(this, evt);\n    }\n  } else {\n    for (var i = 0, events = [], length = listeners.length; i < length; i++) {\n      if (\n        listeners[i].fn !== fn ||\n        (once && !listeners[i].once) ||\n        (context && listeners[i].context !== context)\n      ) {\n        events.push(listeners[i]);\n      }\n    }\n\n    //\n    // Reset the array, or remove it completely if we have no more listeners.\n    //\n    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;\n    else clearEvent(this, evt);\n  }\n\n  return this;\n};\n\n/**\n * Remove all listeners, or those of the specified event.\n *\n * @param {(String|Symbol)} [event] The event name.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {\n  var evt;\n\n  if (event) {\n    evt = prefix ? prefix + event : event;\n    if (this._events[evt]) clearEvent(this, evt);\n  } else {\n    this._events = new Events();\n    this._eventsCount = 0;\n  }\n\n  return this;\n};\n\n//\n// Alias methods names because people roll like that.\n//\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\nEventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\n//\n// Expose the prefix.\n//\nEventEmitter.prefixed = prefix;\n\n//\n// Allow `EventEmitter` to be imported as module namespace.\n//\nEventEmitter.EventEmitter = EventEmitter;\n\n//\n// Expose the module.\n//\nif ('undefined' !== typeof module) {\n  module.exports = EventEmitter;\n}\n"],"sourceRoot":""}